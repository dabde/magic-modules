<% autogen_exception -%>
package google

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
        computeBeta "google.golang.org/api/compute/v0.beta"
	"google.golang.org/api/compute/v1"
)

<% unless version == 'ga' -%>
func TestAccComputeRegionHealthCheck_tcp(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_tcp(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckThresholds(
						3, 3, &healthCheck),
					testAccCheckComputeRegionHealthCheckTcpPort(80, &healthCheck),
					testAccCheckComputeRegionHealthCheckPortSpec(
						"TCP", "", &healthCheck,
					),
				),
			},
			{
				ResourceName:      "google_compute_region_health_check.foobar",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_tcp_update(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_tcp(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckThresholds(
						3, 3, &healthCheck),
					testAccCheckComputeRegionHealthCheckTcpPort(80, &healthCheck),
				),
			},
			{
				Config: testAccComputeRegionHealthCheck_tcp_update(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckThresholds(
						10, 10, &healthCheck),
					testAccCheckComputeRegionHealthCheckTcpPort(8080, &healthCheck),
				),
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_ssl(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_ssl(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckThresholds(
						3, 3, &healthCheck),
				),
			},
			{
				ResourceName:      "google_compute_region_health_check.foobar",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_ssl_port_spec(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_ssl_fixed_port(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckPortSpec(
						"SSL", "USE_FIXED_PORT", &healthCheck),
				),
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_http(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_http(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckThresholds(
						3, 3, &healthCheck),
				),
			},
			{
				ResourceName:      "google_compute_region_health_check.foobar",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_http_port_spec(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config:      testAccComputeRegionHealthCheck_http_port_spec(hckName),
				ExpectError: regexp.MustCompile("Error in http_health_check: Must specify port_name when using USE_NAMED_PORT as port_specification."),
			},
			{
				Config: testAccComputeRegionHealthCheck_http_named_port(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckPortSpec(
						"HTTP", "USE_NAMED_PORT", &healthCheck,
					),
				),
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_https(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_https(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckThresholds(
						3, 3, &healthCheck),
				),
			},
			{
				ResourceName:      "google_compute_region_health_check.foobar",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_https_serving_port(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_https_serving_port(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckPortSpec(
						"HTTPS", "USE_SERVING_PORT", &healthCheck,
					),
				),
			},
			{
				ResourceName:      "google_compute_region_health_check.foobar",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_http2(t *testing.T) {
	t.Parallel()

	var healthCheck computeBeta.HealthCheck

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_http2(hckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeRegionHealthCheckExists(
						"google_compute_region_health_check.foobar", &healthCheck),
					testAccCheckComputeRegionHealthCheckThresholds(
						3, 3, &healthCheck),
				),
			},
			{
				ResourceName:      "google_compute_region_health_check.foobar",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_typeTransition(t *testing.T) {
	t.Parallel()

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthCheck_https(hckName),
			},
			{
				Config: testAccComputeRegionHealthCheck_http(hckName),
			},
			{
				Config: testAccComputeRegionHealthCheck_ssl(hckName),
			},
			{
				Config: testAccComputeRegionHealthCheck_tcp(hckName),
			},
			{
				Config: testAccComputeRegionHealthCheck_http2(hckName),
			},
			{
				Config: testAccComputeRegionHealthCheck_https(hckName),
			},
		},
	})
}

func TestAccComputeRegionHealthCheck_tcpAndSsl_shouldFail(t *testing.T) {
	t.Parallel()

	hckName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckComputeRegionHealthCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config:      testAccComputeRegionHealthCheck_tcpAndSsl_shouldFail(hckName),
				ExpectError: regexp.MustCompile("conflicts with tcp_health_check"),
			},
		},
	})
}

func testAccCheckComputeRegionHealthCheckExists(n string, healthCheck *computeBeta.HealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[n]
		if !ok {
			return fmt.Errorf("Not found: %s", n)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("No ID is set")
		}

		config := testAccProvider.Meta().(*Config)

		found, err := config.clientComputeBeta.RegionHealthChecks.Get(
			config.Project, config.Region, rs.Primary.ID).Do()
		if err != nil {
			return err
		}

		if found.Name != rs.Primary.ID {
			return fmt.Errorf("HealthCheck not found")
		}

		*healthCheck = *found

		return nil
	}
}

func testAccCheckComputeRegionHealthCheckThresholds(healthy, unhealthy int64, healthCheck *computeBeta.HealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		if healthCheck.HealthyThreshold != healthy {
			return fmt.Errorf("HealthyThreshold doesn't match: expected %d, got %d", healthy, healthCheck.HealthyThreshold)
		}

		if healthCheck.UnhealthyThreshold != unhealthy {
			return fmt.Errorf("UnhealthyThreshold doesn't match: expected %d, got %d", unhealthy, healthCheck.UnhealthyThreshold)
		}

		return nil
	}
}

func testAccCheckComputeRegionHealthCheckTcpPort(port int64, healthCheck *computeBeta.HealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		if healthCheck.TcpHealthCheck.Port != port {
			return fmt.Errorf("Port doesn't match: expected %v, got %v", port, healthCheck.TcpHealthCheck.Port)
		}
		return nil
	}
}

func testAccCheckComputeRegionHealthCheckPortSpec(blockType, portSpec string, healthCheck *computeBeta.HealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		var actualPortSpec string

		switch blockType {
		case "SSL":
			actualPortSpec = healthCheck.SslHealthCheck.PortSpecification
		case "HTTP":
			actualPortSpec = healthCheck.HttpHealthCheck.PortSpecification
		case "HTTPS":
			actualPortSpec = healthCheck.HttpsHealthCheck.PortSpecification
		case "TCP":
			actualPortSpec = healthCheck.TcpHealthCheck.PortSpecification
		}

		if actualPortSpec != portSpec {
			return fmt.Errorf("Port Specification doesn't match: expected %v, got %v", portSpec, actualPortSpec)
		}

		return nil
	}
}

func testAccComputeRegionHealthCheck_tcp(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	tcp_health_check {
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_tcp_update(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource updated for Terraform acceptance testing"
	healthy_threshold = 10
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 10
	tcp_health_check {
		port = "8080"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_ssl(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	ssl_health_check {
		port = "443"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_ssl_fixed_port(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	ssl_health_check {
		port = "443"
		port_specification = "USE_FIXED_PORT"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_http(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	http_health_check {
		port = "80"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_http_port_spec(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	http_health_check {
		port_specification = "USE_NAMED_PORT"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_http_named_port(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	http_health_check {
		port_name = "http"
		port_specification = "USE_NAMED_PORT"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_https(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	https_health_check {
		port = "443"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_https_serving_port(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	https_health_check {
		port_specification = "USE_SERVING_PORT"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_http2(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3
	http2_health_check {
		port = "443"
	}
}
`, hckName)
}

func testAccComputeRegionHealthCheck_tcpAndSsl_shouldFail(hckName string) string {
	return fmt.Sprintf(`
resource "google_compute_region_health_check" "foobar" {
	check_interval_sec = 3
	description = "Resource created for Terraform acceptance testing"
	healthy_threshold = 3
	name = "health-test-%s"
	timeout_sec = 2
	unhealthy_threshold = 3

	tcp_health_check {
	}
	ssl_health_check {
	}
}
`, hckName)
}
<% end -%>
