---
<%= lines(autogen_notice :yaml) -%>
- block:
  # Pre-test setup
<% unless example.dependencies.nil? -%>
<% example.dependencies.each do |depend| -%>
<%= lines(indent(depend.build_test('present', object, false), 2)) -%>
<% end # example.dependencies.each -%>
<% end # if example.dependencies -%>
<%= lines(indent(example.task.build_test('absent', object, false), 2)) -%>
  #----------------------------------------------------------
<% resource_name = object.name.uncombine.downcase -%>
<%= lines(indent(example.task.build_test('present', object, false), 2)) -%>
    register: result
<% if object.readonly -%>
  - name: assert changed is false
<% else # if object.readonly -%>
  - name: assert changed is true
<% end # if object.readonly -%>
    assert:
      that:
<% if object.readonly -%>
        # <%= object.name -%> is not altered, just verified.
        - result.changed == false
<% else # if object.readonly -%>
        - result.changed == true
<% end # if object.readonly -%>
<% if object.kind? -%>
        - "result.kind == <%= quote_string(object.kind) -%>"
<% end # if object.kind -%>
<% unless example.verifier.nil? -%>
<%= lines(indent(example.verifier.build_task('present', object), 2)) -%>
<% end -%>
<% unless object.readonly -%>
  # ----------------------------------------------------------------------------
<%= lines(indent(example.task.build_test('present', object, true), 2)) -%>
    register: result
  - name: assert changed is false
    assert:
      that:
        - result.changed == false
<% if object.kind? -%>
        - "result.kind == <%= quote_string(object.kind) -%>"
<% end # if object.kind -%>
  #----------------------------------------------------------
<%= lines(indent(example.task.build_test('absent', object, false), 2)) -%>
    register: result
  - name: assert changed is true
    assert:
      that:
        - result.changed == true
<% if object.kind? -%>
        - result.has_key('kind') == False
<% end # if object.kind? -%>
<% unless example.verifier.nil? -%>
<%= lines(indent(example.verifier.build_task('absent', object), 2)) -%>
<% end -%>
  # ----------------------------------------------------------------------------
<%= lines(indent(example.task.build_test('absent', object, true), 2)) -%>
    register: result
  - name: assert changed is false
    assert:
      that:
        - result.changed == false
<% if object.kind? -%>
        - result.has_key('kind') == False
<% end # if object.kind? -%>
<% end # object.readonly -%>
<% if example.dependencies and !example.dependencies.empty? -%>
  always:
  #---------------------------------------------------------
  # Post-test teardown
  # If errors happen, don't crash the playbook!
<% example.dependencies.reverse.each do |depend| -%>
<%= lines(indent(depend.build_test('absent', object, false), 2)) -%>
    ignore_errors: true
<% end # example.dependencies.each -%>
<% end # if example.dependencies -%>
