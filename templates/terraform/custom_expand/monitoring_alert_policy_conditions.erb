func expand<%= prefix -%><%= titlelize_property(property) -%>(v interface{}, d *schema.ResourceData, config *Config) (interface{}, error) {
  l := v.([]interface{})
  req := make([]interface{}, 0, len(l))
  for _, raw := range l {
    original := raw.(map[string]interface{})
    transformed := make(map[string]interface{})

    if _, ok := original["name"]; ok {
      transformed["name"] = original["name"]
    }

    if absent, ok := original["condition_absent"]; ok && !isEmptyValue(reflect.ValueOf(absent)) {
      transformedConditionAbsent, err := expandMonitoringAlertPolicyConditionsConditionAbsent(absent, d, config)
      if err != nil {
        return nil, err
      }
      transformed["conditionAbsent"] = transformedConditionAbsent
    } else if threshold, ok := original["condition_threshold"]; ok && !isEmptyValue(reflect.ValueOf(threshold)) {
      transformedConditionThreshold, err := expandMonitoringAlertPolicyConditionsConditionThreshold(threshold, d, config)
      if err != nil {
        return nil, err
      }
      transformed["conditionThreshold"] = transformedConditionThreshold
    } else {
      return nil, fmt.Errorf("One of conditionAbsent or conditionThreshold is required for each condition")
    }

    if _, ok := original["display_name"]; ok {
      transformed["displayName"] = original["display_name"]
    }

    req = append(req, transformed)
  }
  return req, nil
}

func expandMonitoringAlertPolicyConditionsConditionThreshold(v interface{}, d *schema.ResourceData, config *Config) (interface{}, error) {
  l := v.([]interface{})
  if len(l) == 0 {
    return nil, nil
  }
  raw := l[0]
  original := raw.(map[string]interface{})
  transformed := make(map[string]interface{})

  for t, g := range map[string]string{
      "comparison": "comparison",
      "denominator_filter": "denominatorFilter",
      "duration": "duration",
      "filter": "filter",
      "threshold_value": "thresholdValue",} {
    if s, ok := original[t]; ok {
      transformed[g] = s
    }
  }

  trigger, err := expandMonitoringTrigger(original["trigger"], d, config)
  if err != nil {
    return nil, err
  }
  transformed["trigger"] = trigger

  return transformed, nil
}

func expandMonitoringTrigger(v interface{}, d *schema.ResourceData, config *Config) (interface{}, error) {
  l := v.([]interface{})
  if len(l) == 0 {
    return nil, fmt.Errorf("Trigger is required for alert policy condition")
  }
  trigger := l[0].(map[string]interface{})
  if s, ok := trigger["count"]; ok {
    return map[string]interface{}{
      "count": s,
    }, nil
  } else if s, ok := trigger["percent"]; ok {
    return map[string]interface{}{
      "percent": s,
    }, nil
  }
  return nil, fmt.Errorf("Invalid alert policy trigger type")
}

func expandMonitoringAlertPolicyConditionsConditionAbsent(v interface{}, d *schema.ResourceData, config *Config) (interface{}, error) {
  l := v.([]interface{})
  if len(l) == 0 {
    return nil, nil
  }
  raw := l[0]
  original := raw.(map[string]interface{})
  transformed := make(map[string]interface{})

  transformedFilter, err := expandMonitoringAlertPolicyConditionsConditionAbsentFilter(original["filter"], d, config)
  if err != nil {
    return nil, err
  }
  transformed["filter"] = transformedFilter
  return transformed, nil
}

func expandMonitoringAlertPolicyConditionsConditionAbsentFilter(v interface{}, d *schema.ResourceData, config *Config) (interface{}, error) {
  return v, nil
}