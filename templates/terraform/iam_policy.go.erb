package google

import (
	"fmt"

	"github.com/hashicorp/errwrap"
	"github.com/hashicorp/terraform/helper/schema"
	"google.golang.org/api/cloudresourcemanager/v1"
	"google.golang.org/api/pubsub/v1"
)
<% resource_name = product_ns + object.name -%>

var <%= resource_name -%>IamSchema = map[string]*schema.Schema{
	"topic": {
		Type:             schema.TypeString,
		Required:         true,
		ForceNew:         true,
		DiffSuppressFunc: compareSelfLinkOrResourceName,
	},
	"project": {
		Type:     schema.TypeString,
		Optional: true,
		Computed: true,
		ForceNew: true,
	},
}

type <%= resource_name -%>IamUpdater struct {
	topic   string
	project string
	d       *schema.ResourceData
	Config  *Config
}

func <%= resource_name -%>IamUpdaterProducer(d *schema.ResourceData, config *Config) (ResourceIamUpdater, error) {
	project, err := getProject(d, config)
	if err != nil {
		return nil, err
	}

	split := strings.Split(d.Get("topic").(string), "/")
	tn := split[len(split)-1]

	return &PubsubTopicIamUpdater{
		topic:   tn,
		project: project,
		d:       d,
		Config:  config,
	}, nil
}

func <%= resource_name -%>IdParseFunc(d *schema.ResourceData, config *Config) error {
	d.Set("topic", d.Id())
	return nil
}

func (u *<%= resource_name -%>IamUpdater) GetResourceIamPolicy() (*cloudresourcemanager.Policy, error) {
	url := QualifyUrl(u)

	policy, err := sendRequest(u.Config, "GET", url, nil)
	if err != nil {
		return nil, errwrap.Wrapf(fmt.Sprintf("Error retrieving IAM policy for %s: {{err}}", u.DescribeResource()), err)
	}

	out := &cloudresourcemanager.Policy{}
	err = Convert(policy, out)
	if err != nil {
		return nil, errwrap.Wrapf("Cannot convert a pubsub policy to a v1 policy: {{err}}", err)
	}

	return out, nil
}

func (u *<%= resource_name -%>IamUpdater) SetResourceIamPolicy(policy *cloudresourcemanager.Policy) error {
	pubsubPolicy, err := resourceManagerToPubsubPolicy(policy)
	if err != nil {
		return err
	}

	url := QualifyUrl(u)

	_, err := sendRequestWithTimeout(u.Config, "PUT", url, pubsubPolicy, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return errwrap.Wrapf(fmt.Sprintf("Error setting IAM policy for %s: {{err}}", u.DescribeResource(), err))
	}

	return nil
}

func (u *PubsubTopicIamUpdater) QualifyUrl() string {
	return fmt.Sprintf("https://pubsub.googleapis.com/v1/projects/%s/topics/%s:getIamPolicy", u.project, u.topic)
}

func (u *<%= resource_name -%>IamUpdater) GetResourceId() string {
	return getComputedTopicName(u.project, u.topic)
}

func (u *<%= resource_name -%>IamUpdater) GetMutexKey() string {
	return fmt.Sprintf("iam-pubsub-topic-%s", getComputedTopicName(u.project, u.topic))
}

func (u *<%= resource_name -%>IamUpdater) DescribeResource() string {
	return fmt.Sprintf("pubsub topic %q", getComputedTopicName(u.project, u.topic))
}

// v1 and v2beta policy are identical
func resourceManagerToPubsubPolicy(in *cloudresourcemanager.Policy) (*pubsub.Policy, error) {
	out := &pubsub.Policy{}
	err := Convert(in, out)
	if err != nil {
		return nil, errwrap.Wrapf("Cannot convert a v1 policy to a pubsub policy: {{err}}", err)
	}
	return out, nil
}
