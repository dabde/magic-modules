<%# The license inside this block applies to this file.
	# Copyright 2019 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
// Some labels are obfuscated for monitoring channels - this method
// checks to see if the value read from the server looks like the obfuscated
// version of the state value, and will just use the state value if so.
// This avoids a permadiff.
func flatten<%= prefix -%><%= titlelize_property(property) -%>(v interface{}, d *schema.ResourceData) interface{} {
	if v == nil {
		return v
	}
	readLabels := v.(map[string]interface{})

	stateV, ok := d.GetOk("labels")
	if !ok {
		return v
	}
	stateLabels := stateV.(map[string]interface{})

	for k, serverV := range readLabels {
		stateRawV, ok := stateLabels[k]
		if !ok {
			continue
		}

		serverLabel := serverV.(string)
		stateLabel := stateRawV.(string)
		if stateLabel == serverLabel {
			continue
		}
		if len(stateLabel) != len(serverLabel) {
			continue
		}

		replace := true
		for i := 0; i < len(stateLabel); i++ {
			if serverLabel[i] != '*' && stateLabel[i] != serverLabel[i] {
				replace = false
			}
		}
		if replace {
			readLabels[k] = stateLabel
		}
	}
	return readLabels
}