	// TODO: megan
	// bound returned as a list of floats, but item_type `String` in configuration
	// this should be removed when we change item_type to type `Double`
	new := map[string]map[string]interface{}{}

	if bucketOptions, ok := res["bucketOptions"].(map[string]interface{}); ok {
		new["bucketOptions"] = make(map[string]interface{})

		if len(bucketOptions) > 0 {
			if explicitBuckets, ok := bucketOptions["explicitBuckets"].(map[string]interface{}); ok {
				if len(explicitBuckets) > 0 {
					new["bucketOptions"]["explicitBuckets"] = make(map[string]interface{})
					options := map[string]map[string]interface{}{}

					if bounds, ok := explicitBuckets["bounds"].([]interface{}); ok {
						options["explicitBuckets"] = make(map[string]interface{})

						if len(bounds) > 0 {
							buckets := map[string][]string{}
							for _, b := range bounds {
								buckets["bounds"] = append(buckets["bounds"], fmt.Sprintf("%g", b))
							}

							for k, v := range buckets {
								options["explicitBuckets"][k] = v
							}
						}
					}

					for k, v := range options {
						new["bucketOptions"][k] = v
					}
				}
			}
		}
	}

	for k, v := range new {
		res[k] = v
	}

	return res, nil
