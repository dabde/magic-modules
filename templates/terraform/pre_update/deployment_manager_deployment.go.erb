<%-# The license inside this block applies to this file:
   # Copyright 2018 Google Inc.
   # Licensed under the Apache License, Version 2.0 (the "License");
   # you may not use this file except in compliance with the License.
   # You may obtain a copy of the License at
   #
   #     http://www.apache.org/licenses/LICENSE-2.0
   #
   # Unless required by applicable law or agreed to in writing, software
   # distributed under the License is distributed on an "AS IS" BASIS,
   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   # See the License for the specific language governing permissions and
   # limitations under the License.
-%>
d.Partial(true)
if d.HasChange("preview") {
	// Deployment Manager preview must be updated by itself.
	// Thus, we do two updates, the first updating preview.
	log.Printf("[DEBUG] Updating preview mode for Deployment %q", d.Id())

	// Send initial preview update request
	previewOp, err := sendRequestWithTimeout(config, "PATCH", project, url, nil, d.Timeout(schema.TimeoutUpdate))
	if err != nil {
		return fmt.Errorf("Error updating preview for Deployment %q: %s", d.Id(), err)
	}

	err = deploymentManagerOperationWaitTime(config, previewOp, project, "Updating Deployment preview", int(d.Timeout(schema.TimeoutUpdate).Minutes()))
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished updating preview mode for deployment")
	d.SetPartial("preview")

	// Get updated fingerprint
	if err := resourceDeploymentManagerDeploymentRead(d, meta); err != nil {
		return err
	}
	fingerprintProp, err := expandDeploymentManagerDeploymentFingerprint(d.Get("fingerprint"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("fingerprint"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, fingerprintProp)) {
		obj["fingerprint"] = fingerprintProp
	}
}
log.Printf("[DEBUG] Updating non-preview fields for Deployment %q", d.Id())